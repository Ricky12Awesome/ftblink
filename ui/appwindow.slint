import { Button, VerticalBox, HorizontalBox, TextEdit, LineEdit, Spinner, ComboBox } from "std-widgets.slint";

export global PathSelectorGlobal {
    callback browse(string) -> string;
    callback open(string);
}

export component PathSelector inherits HorizontalBox {
    in-out property <string> display <=> text.text;
    in-out property <string> path <=> edit.text;

    callback accepted(string);
    callback edited(string);

    alignment: start;
    spacing: 0.5rem;

    text := Text {
        vertical-alignment: center;
    }

    edit := LineEdit {
        preferred-width: parent.width;

        edited => {
            parent.path = self.text;
            parent.edited(parent.path);
        }

        accepted => {
            parent.path = self.text;
            parent.accepted(parent.path);
        }
    }

    Button {
        text: "Browse";

        clicked => {
            parent.path = PathSelectorGlobal.browse(parent.path);
        }
    }

    Button {
        text: "Open";

        clicked => {
            PathSelectorGlobal.open(parent.path);
        }
    }

}

export component AppWindow inherits Window {
    in-out property <[string]> packs <=> packs.model;
    in-out property <string> selected <=> packs.current-value;
    in-out property <bool> linked: false;

    in-out property <string> mmc-path <=> mmc.path;
    in-out property <string> ftb-path <=> ftb.path;

    callback load-packs(string) -> [string];

    min-width: 48rem;
    min-height: 12rem;

    VerticalBox {
        alignment: center;
        spacing: 0.5rem;
        padding-top: 0.5rem;
        padding-bottom: 0.5rem;
        padding-left: 1.5rem;
        padding-right: 1.5rem;

        mmc := PathSelector {
            display: "Prism/MultiMC";
        }

        ftb := PathSelector {
            display: "FTB";

            edited(s) => {
                root.packs = load-packs(s);
            }
        }

        HorizontalBox {
            packs := ComboBox {

            }

            Button {
                text: linked ? "Unlink" : "Link";
                primary: true;
                clicked => {

                }
            }
        }
    }
}
